import json, typing
import matplotlib.dates as dts
import pandas as pd
import plotly.express as px
from os import walk
from datetime import datetime, date, timedelta

PandasDataFrame = typing.TypeVar('pandas.core.frame.DataFrame')


def past_week_dates(current_date: str) -> typing.List[str]:
    """
    This function calculates the dates for past seven days before given date.

        Parameters:
            current_date (str): given date as string in format YY-MM-DD

        Returns:
            past_dates (list): list of dates (strings)
    """
    start_date = datetime.strptime(current_date, "%Y-%m-%d")
    past_dates = [str(start_date - timedelta(days=i)).split()[0] for i in range(1, 8)]
    return past_dates


def paths_to_files(start_path: str, directories: typing.List[str]) -> typing.List[str]:
    """
    This function takes past week dates and go through every directory to make paths to files with data.

        Parameters:
            start_path (str): full path to start directory
            directories (list): dates generated by past_week_dates function

        Returns:
            files_paths (list): list of paths to data files
    """
    files_paths = []
    for directory in directories:
        filenames = next(walk(f'{start_path}{directory}'), (None, None, []))[2]
        for filename in filenames:
            file_path = start_path + directory + '/' + filename
            files_paths.append(file_path)
    return files_paths


def files_parser(files_paths: typing.List[str]) -> None:
    """
    This function parse files into format able to be loaded as json.

        Parameters:
            files_paths (list): paths generated by paths_to_files function

        Returns:
            None
    """
    for file_path in files_paths:
        with open(file_path, 'r', encoding='utf-8') as f:
            text = ''
            i = 0
            for line in f:
                if 'CPH' in line:
                    text += '{"CPH":\n'
                elif 'Cracow' in line:
                    text += '"Cracow":\n'
                elif 'Lipowa' in line:
                    text += '"Lipowa":\n'
                elif 'BB' in line:
                    text += '"BB":\n'
                elif ']' in line:
                    if i < 3:
                        text += line + ',\n'
                        i += 1
                    else:
                        text += line + '}'
                else:
                    text += line
        with open(file_path, 'w', encoding='utf-8') as f:
            pass
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(text)


def open_read_files(files_paths: typing.List[str]) -> PandasDataFrame:
    """
    This function use parser and paths to files to read data to dictionary and return it as DataFrame.

        Parameters:
            files_paths (list): paths to files with data

        Returns:
            PandasDataFrame for output dictionary
    """
    files_parser(files_paths)
    output = {'place': [], 'date': [], 'time': [], 'measure_type': [], 'measure_value': []}
    places = ['BB', 'CPH', 'Cracow', 'Lipowa']
    for file_path in files_paths:
        v_time_long = file_path.split('/')[-1]
        v_time = '-'.join(v_time_long.split('-')[:-1])
        v_date = file_path.split('/')[-2]
        with open(file_path, 'r', encoding='utf-8') as f:
            d = json.load(f)
            for place in places:
                values = d[place][:3]
                for v in values:
                    output['place'].append(place)
                    output['date'].append(v_date)
                    output['time'].append(v_time)
                    output['measure_type'].append(v['name'])
                    output['measure_value'].append(v['value'])
    return pd.DataFrame(output, columns=['place', 'date', 'time', 'measure_type', 'measure_value'])


def make_report(date_today: str) -> dict:
    """
    This function takes a date and run other functions to prepare plots for last week data.

        Parameters:
            date_today (str): actual date to calculate week before

        Returns:
            figs (dict): dictionary with plots of weekly data
    """
    start_directory = '/path/to/data/'
    df = open_read_files(paths_to_files(start_directory, past_week_dates(date_today)))
    df['date_time'] = df['date'] + ':' + df['time']
    df['date_time'] = pd.to_datetime(df['date_time'], format='%Y-%m-%d:%H-%M')
    figs = dict()
    for type_to_plot in ['PM1', 'PM25', 'PM10']:
        data = df[df['measure_type'] == type_to_plot]
        figs[type_to_plot] = px.scatter(data, x='date_time', y='measure_value', color='place', size='measure_value')
        figs[type_to_plot].update_layout(
            title=f'{type_to_plot} for selected places',
            xaxis_title='Date and time',
            yaxis_title='Value',
            legend_title='Place',
            font=dict(
                family='Courier New, monospace',
                size=18,
                color='RebeccaPurple'
            )
        )
    return figs


if __name__ == '__main__':
    print("Use send_report script to run this one!")
